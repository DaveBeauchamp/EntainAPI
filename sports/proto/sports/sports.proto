syntax = "proto3";
package sports;

option go_package = "/sports";

import "google/protobuf/timestamp.proto";

service Events {
  // ListRaces will return a collection of all races.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}

}

/* Requests/Responses */

// Request for ListRaces call.
message ListEventsRequest {
  ListEventsRequestFilter filter = 1;
}

// Response to ListRaces call.
message ListEventsResponse {
  repeated Event events = 1;
}

// Filter for listing races.
message ListEventsRequestFilter {
  repeated int64 event_ids = 1;
}

/* Resources */

// A race resource.
message Event {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 name = 2;
  // Name is the official name given to the race.
  string teamOne = 3;
  // Number represents the number of the race.
  int64 teamTwo = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
}

